usethis::use_pipe()
getwd()
devtools::create(getwd())
usethis::create_package(getwd())
setlist <- list(
S1=LETTERS[1:5],
S2=LETTERS[3:5],
S3=LETTERS[1:10]
)
library(settleR)
sets_to_matrix(setlist )
binary_mat <-  sets_to_matrix(setlist )
cnt_df <- plyr::count(binary_mat)
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
cnt_df$degree <- rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )])
View(cnt_df)
library(reshape2)
colSums(binary_mat)
rbind(cnt_df, binary_mat)
join(binary_mat, cnt_df)
full_join(binary_mat, cnt_df)
full_join(data.frame(binary_mat), data.frame(cnt_df))
full_join(data.frame(colSums(binary_mat)), data.frame(cnt_df))
data.frame(colSums(binary_mat))
colSums(binary_mat)
as.data.frame(colSums(binary_mat))
data.frame(set_totals=t(colSums(binary_mat)))
data.frame(t(colSums(binary_mat)), row.names = 'set_totals')
set_totals <- data.frame(t(colSums(binary_mat)), row.names = 'set_totals')
full_join(cnt_df, set_totals)
View(cnt_df)
row.names(cnt_df) <- paste0('intersect_', nrow(cnt_df))
paste0('intersect_', nrow(cnt_df))
paste0('intersect_', seq(1,nrow(cnt_df)))
row.names(cnt_df) <- paste0('intersect_', seq(1,nrow(cnt_df)))
set_totals <- t(colSums(binary_mat))
View(set_totals)
# set_totals <- data.frame(t(colSums(binary_mat)), row.names = 'set_totals')
set_totals <- colSums(binary_mat)
set_totals
names(set_totals)
data.frame(t(colSums(binary_mat)), row.names = 'set_totals')
data.frame(t(colSums(binary_mat)))
cnt_df <- plyr::count(binary_mat)
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
cnt_df$degree <- rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )])
View(cnt_df)
# creates row.names for melting
rns <- c(paste0('intersect_', seq(1,nrow(cnt_df))), 'set_totals')
rns
cnt_df <- full_join(cnt_df, set_totals)
set_totals <- data.frame(t(colSums(binary_mat)))
# creates row.names for melting
rns <- c(paste0('intersect_', seq(1,nrow(cnt_df))), 'set_totals')
cnt_df <- full_join(cnt_df, set_totals)
View(set_totals)
View(cnt_df)
row.names(cnt_df) <- rns
?full_join
cnt_df <- full_join(cnt_df, set_totals, by='name')
cnt_df <- full_join(cnt_df, set_totals, by='names')
cnt_df <- full_join(cnt_df, set_totals, by='name')
cnt_df <- full_join(cnt_df, set_totals, by='colnames')
merge(cnt_df, set_totals)
merge(cnt_df, set_totals, all = TRUE)
cnt_df <- merge(cnt_df, set_totals, all = TRUE)
row.names(cnt_df) <- rns
tf <- melt(cnt_df, keep=TRUE)
View(tf)
tf <- melt(cnt_df)
View(cnt_df)
?melt
as.matrix(cnt_df)
mlet(as.matrix(cnt_df))
melt(as.matrix(cnt_df))
cnt_df <- merge(cnt_df, set_totals, all = TRUE) %>%
as.matrix(.)
View(cnt_df)
rns <- c(paste0('intersect_', seq(1,nrow(cnt_df))), 'set_totals')
cnt_df <- merge(cnt_df, set_totals, all = TRUE) %>%
as.matrix(.)
View(cnt_df)
cnt_df <- merge(cnt_df, set_totals, all = TRUE) %>%
data.frame(rns, .)
merge(cnt_df, set_totals, all = TRUE)
rns
cnt_df <- plyr::count(binary_mat)
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
cnt_df$degree <- rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )])
set_totals <- data.frame(t(colSums(binary_mat)))
# creates row.names for melting
rns <- c(paste0('intersect_', seq(1,nrow(cnt_df))), 'set_totals')
cnt_df <- merge(cnt_df, set_totals, all = TRUE) %>%
data.frame(rns, .)
View(cnt_df)
tf <- melt(cnt_df)
View(tf)
cnt_df <- merge(cnt_df, set_totals, all = TRUE)
matrix(cnt_df)
as.matrix(cnt_df)
cnt_df <- plyr::count(binary_mat)
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
cnt_df$degree <- rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )])
set_totals <- data.frame(t(colSums(binary_mat)))
# creates row.names for melting
rns <- c(paste0('intersect_', seq(1,nrow(cnt_df))), 'set_totals')
cnt_df <- merge(cnt_df, set_totals, all = TRUE) %>%
}
cnt_df <- merge(cnt_df, set_totals, all = TRUE)
cnt_df
as.matrix(cnt_df)
as.matrix(cnt_df, row.names=rns)
as.matrix(cnt_df, rownames=rns)
?matrix
cnt_df <- merge(cnt_df, set_totals, all = TRUE) %>%
data.frame(rns, .)
tf <- melt(cnt_df)
tf <- melt(cnt_df, id.vars = )
tf <- melt(cnt_df, id.vars = 'rns')
View(tf)
tf <- melt(cnt_df, id.vars = 'rns') %>%
na.omit(.)
View(tf)
library(ggplot2)
View(tf)
View(cnt_df)
View(cnt_df)
View(cnt_df)
View(cnt_df)
View(cnt_df)
View(binary_mat)
tf1 <- colnames(binary_mat)
tf1 <- tf[colnames(binary_mat),]
View(tf1)
View(tf)
tf1 <- filter(tf, variable %in% colnames(binary_mat))
View(tf)
View(tf1)
tf2 <- tf1[tf1$rns == 'set_totals',]
View(tf2)
cnt_df <- plyr::count(binary_mat)
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
cnt_df$degree <- rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )])
set_totals <- data.frame(t(colSums(binary_mat)))
View(cnt_df)
View(setlist)
View(tf1)
View(tf)
View(tf2)
View(tf1)
tf1 <- tf1[tf1$rns != 'set_totals',]
View(cnt_df)
View(cnt_df)
View(cnt_df)
names(cnt_df)
set_totals <- data.frame(t(colSums(binary_mat)))
cnt_df <- plyr::count(binary_mat)
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
intersect_data <- data.frame(freq=cnt_df$freq,
degree=rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )]))
set_totals <- data.frame(t(colSums(binary_mat)))
View(setlist)
View(set_totals)
plyr::count(binary_mat) %>% pull()
View(cnt_df)
intersect_data <- data.frame(freq=cnt_df$freq)
View(intersect_data)
count(binary_mat)
count(data.frame(binary_mat))
count(.data=data.frame(binary_mat))
tf <- melt(binary_mat)
View(tf)
as.binary(tf$value)
as.logical(tf$value)
View(binary_mat)
count(tf)
count(.data=tf)
?count
plyr
plyr::count(tf)
plyr::count(binary_mat)
plyr::count(data.frame(binary_mat))
count(data.frame(binary_mat))
data.frame(binary_mat)
melt_df <- melt(binary_mat)
View(melt_df)
dplyr::count(Var1 ~ Var2)
dplyr::count(Var1 ~ Var2, data=melt_df)
table(Var1 ~ Var2, data=melt_df)
table(melt_df$Var1 , melt_df$Var2)
cnt_df <- plyr::count(binary_mat)
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
intersect_data <- data.frame(freq=cnt_df$freq,
degree=rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )]))
set_totals <- data.frame(t(colSums(binary_mat)))
View(set_totals)
View(intersect_data)
View(set_totals)
View(cnt_df)
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -2 )]
View(grid_data)
cnt_df <- plyr::count(binary_mat)
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)]
cnt_df <- plyr::count(binary_mat)
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
intersect_data <- data.frame(freq=cnt_df$freq,
degree=rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )]))
set_totals <- data.frame(t(colSums(binary_mat)))
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)]
View(grid_data)
row.names(cnt_df) <- paste0('intersect_', seq(1,nrow(cnt_df)))
cnt_df <- plyr::count(binary_mat)
row.names(cnt_df) <- paste0('intersect_', seq(1,nrow(cnt_df)))
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
intersect_data <- data.frame(freq=cnt_df$freq,
degree=rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )]))
set_totals <- data.frame(t(colSums(binary_mat)))
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)]
View(grid_data)
View(cnt_df)
View(melt_df)
View(intersect_data)
View(grid_data)
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)] %>%
melt(grid_data)
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)]
View(grid_data)
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)] %>%
as.matrix(.) %>%
melt()
View(grid_data)
View(intersect_data)
cnt_df <- plyr::count(binary_mat)
row.names(cnt_df) <- paste0('intersect_', seq(1,nrow(cnt_df)))
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
intersect_data <- data.frame(freq=cnt_df$freq,
degree=rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )]))
set_totals <- data.frame(t(colSums(binary_mat)))
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)] %>%
as.matrix(.) %>%
melt()
View(intersect_data)
View(intersect_data)
View(grid_data)
grid_data$value <- as.logical(grid_data$value)
ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point()
ggplot(data=grid_data, aes(x=Var1, y=Var2, fill=value)) + geom_point()
ggplot(data=grid_data, aes(x=Var1, y=Var2, colour=value)) + geom_point()
ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point() + theme_void()
ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(1.9)) + theme_void()
ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(40)) + theme_void()
ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(15)) + theme_void()
ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(15), alpha=.25) + theme_void()
ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(15), alpha=.25) + theme_void()
quartz()
ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(15), alpha=.25) + theme_void()
grid_data$value <- as.logical(grid_data$value)
grid_data[grid_data$value,]
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(15), alpha=.25) + theme_void()
p + geom_line(data=grid_data, aes(x=Var1, y=Var2), inherit.aes = F)
p + geom_line(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), inherit.aes = F)
p
dev.off()
dev.off()
quartz()
p + geom_line(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), inherit.aes = F)
p + geom_line(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2, group=Var2), inherit.aes = F)
View(grid_data)
p + geom_line(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2, group=Var1), inherit.aes = F)
p + geom_line(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2, group=Var1), inherit.aes = F) + geom_point(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), inherit.aes = F)
p + geom_line(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2, group=Var1), inherit.aes = F) + geom_point(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), size=rel(5) inherit.aes = F)
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(15), alpha=.25) + theme_void()
p + geom_line(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2, group=Var1), inherit.aes = F) + geom_point(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), size=rel(5), inherit.aes = F)
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(5), alpha=.25) + theme_void()
p + geom_line(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2, group=Var1), inherit.aes = F) + geom_point(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), size=rel(5), inherit.aes = F)
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(15), alpha=.25) + theme_void()
p + geom_line(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2, group=Var1), inherit.aes = F) + geom_point(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), size=rel(5), inherit.aes = F)
grid_plot <- function(grid_data){
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(15), alpha=.25) + theme_void() # just plots empty dots
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
inherit.aes = F) +
p <- p + geom_point(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), size=rel(5), inherit.aes = F)
return(p)
}
grid_plot(grid_data)
grid_plot <- function(grid_data){
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=rel(15), alpha=.25) + theme_void() # just plots empty dots
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
inherit.aes = F)
p <- p + geom_point(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), size=rel(5), inherit.aes = F)
return(p)
}
grid_plot(grid_data)
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=15, alpha=.25) + theme_void() # just plots empty dots
p
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
inherit.aes = F)
p <- p + geom_point(data=grid_data[grid_data$value,], aes(x=Var1, y=Var2), size=5, inherit.aes = F)
p
grid_plot <- function(grid_data){
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=15, alpha=.25) + theme_void() # just plots empty dots
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
size=5,
inherit.aes = F)
p <- p + geom_point(data=grid_data[grid_data$value,], # Add `filled in points`
aes(x=Var1, y=Var2),
size=5,
inherit.aes = F)
return(p)
}
grid_plot(grid_data)
grid_plot <- function(grid_data){
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=15, alpha=.25) + theme_void() # just plots empty dots
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
size=2.5,
inherit.aes = F)
p <- p + geom_point(data=grid_data[grid_data$value,], # Add `filled in points`
aes(x=Var1, y=Var2),
size=5,
inherit.aes = F)
return(p)
}
grid_plot(grid_data)
grid_plot <- function(grid_data){
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=15, alpha=.25) + theme_void() # just plots empty dots
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
size=2.5,
inherit.aes = F)
p <- p + geom_point(data=grid_data[grid_data$value,], # Add `filled in points`
aes(x=Var1, y=Var2),
size=7.5,
inherit.aes = F)
return(p)
}
grid_plot(grid_data)
grid_plot <- function(grid_data){
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=15, alpha=.25) + theme_void() # just plots empty dots
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
size=2.5,
alpha=.75,
inherit.aes = F)
p <- p + geom_point(data=grid_data[grid_data$value,], # Add `filled in points`
aes(x=Var1, y=Var2),
size=7.5,
inherit.aes = F)
return(p)
}
grid_plot(grid_data)
grid_plot <- function(grid_data){
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=15, alpha=.25) + theme_void() # just plots empty dots
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
size=2.5,
alpha=.75,
inherit.aes = F)
p <- p + geom_point(data=grid_data[grid_data$value,], # Add `filled in points`
aes(x=Var1, y=Var2),
size=10.5,
inherit.aes = F)
return(p)
}
grid_plot(grid_data)
grid_plot <- function(grid_data){
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=15, alpha=.25) + theme_void() # just plots empty dots
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
size=2.5,
inherit.aes = F)
p <- p + geom_point(data=grid_data[grid_data$value,], # Add `filled in points`
aes(x=Var1, y=Var2),
size=10.5,
inherit.aes = F)
return(p)
}
grid_plot()
grid_plot(grid_data)
grid_plot <- function(grid_data){
p <-  ggplot(data=grid_data, aes(x=Var1, y=Var2)) + geom_point(size=15, alpha=.25) + theme_void() # just plots empty dots
p <- p + geom_line(data=grid_data[grid_data$value,], # adds the lines
aes(x=Var1, y=Var2, group=Var1),
size=2.5,
inherit.aes = F)
p <- p + geom_point(data=grid_data[grid_data$value,], # Add `filled in points`
aes(x=Var1, y=Var2),
size=15,
inherit.aes = F)
return(p)
}
grid_plot(grid_data)
ggplot_gtable(p)
ggplot_gtable(grid_plot(grid_data))
ggplot_gtable(ggplot_build(grid_plot(grid_data)))
tf <- ggplot_gtable(ggplot_build(grid_plot(grid_data)))
ggplot_gtable
ol <- list(grid_data, intersect_data, set_totals)
calc_set_overlaps <- function(binary_mat){
cnt_df <- plyr::count(binary_mat)
row.names(cnt_df) <- paste0('intersect_', seq(1,nrow(cnt_df)))
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
intersect_data <- data.frame(freq=cnt_df$freq,
degree=rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )]))
set_totals <- data.frame(t(colSums(binary_mat)))
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)] %>%
as.matrix(.) %>%
melt()
grid_data$value <- as.logical(grid_data$value)
ol <- list(grid_data, intersect_data, set_totals) %>%
setNames(., c('grid_data', 'intersect_data', 'set_totals'))
return(ol)
}
tmp_data <- calc_set_overlaps(binary_mat)
View(tmp_data)
p1 <- grid_plot(tmp_data$grid_data)
View(tmp_data)
View(tmp_data[["intersect_data"]])
View(tmp_data[["set_totals"]])
tf <-  as.matrix(tmp_data$intersect_data) %>%
melt(.)
View(tf)
View(tmp_data[["intersect_data"]])
View(tf)
p2 <- ggplot(data=tf[tf$Var2 == 'freq',], aes(x=Var1, y=value))
p2 <- ggplot(data=tf[tf$Var2 == 'freq',], aes(x=Var1, y=value)) + geom_bar()
p2
p2 <- ggplot(data=tf[tf$Var2 == 'freq',], aes(x=Var1, y=value)) + geom_bar(stat='identity')
p2
p2 <- ggplot(data=tf[tf$Var2 == 'freq',], aes(x=Var1, y=value)) + geom_bar(stat='identity') + theme_void()
p2
ggplotGrob(p2)
grid.arrange(rbind(ggplotGrob(p1), ggplotGrob(p2)))
library(gridExtra)
grid.arrange(rbind(ggplotGrob(p1), ggplotGrob(p2)))
grid.arrange(rbind(ggplotGrob(p1), ggplotGrob(p2)), size = "first"))
grid.arrange(rbind(ggplotGrob(p1), ggplotGrob(p2)), size = "first")
p1
p2
grid.arrange(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "first"))
grid.arrange(rbind(ggplotGrob(p2), ggplotGrob(p1) , size = "first"))
p1
p2
p1 <- ggplotGrob(grid_plot(tmp_data$grid_data))
p1
p5 <- rbind(ggplotGrob(p2), ggplotGrob(p1) , size = "first")
p5 <- rbind(ggplotGrob(p2), ggplotGrob(p1) , size = "first")
grid.arrange(rbind(ggplotGrob(p2), ggplotGrob(p1) , size = "first"))
grid.arrange(rbind(p2, p1 , size = "first"))
p1
p
p2
p1
p2 <- ggplot(data=tf[tf$Var2 == 'freq',], aes(x=Var1, y=value)) + geom_bar(stat='identity') + theme_void()
p2 <- ggplot(data=tf[tf$Var2 == 'freq',], aes(x=Var1, y=value)) + geom_bar(stat='identity') + theme_void() %>%
ggplotGrob(.)
p2 <- ggplot(data=tf[tf$Var2 == 'freq',], aes(x=Var1, y=value)) + geom_bar(stat='identity') + theme_void()
p2 <- ggplotGrob(p2)
tmp_p <- rbind(p2, p1 , size = "first")
View(tmp_p)
View(tmp_p)
View(tmp_p)
grid.arrange(tmp_p)
p3 <- ggplot(data=set_totals)
set_totals
calc_set_overlaps <- function(binary_mat){
cnt_df <- plyr::count(binary_mat)
row.names(cnt_df) <- paste0('intersect_', seq(1,nrow(cnt_df)))
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
intersect_data <- data.frame(freq=cnt_df$freq,
degree=rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )]))
set_totals <- data.frame(colSums(binary_mat))
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)] %>%
as.matrix(.) %>%
melt()
grid_data$value <- as.logical(grid_data$value)
ol <- list(grid_data, intersect_data, set_totals) %>%
setNames(., c('grid_data', 'intersect_data', 'set_totals'))
return(ol)
}
tmp_data <- calc_set_overlaps(binary_mat)
View(tmp_data)
View(tmp_data[["set_totals"]])
library(tibble)
calc_set_overlaps <- function(binary_mat){
cnt_df <- plyr::count(binary_mat)
row.names(cnt_df) <- paste0('intersect_', seq(1,nrow(cnt_df)))
colnames(cnt_df) <-  gsub('x\\.','', colnames(cnt_df))
intersect_data <- data.frame(freq=cnt_df$freq,
degree=rowSums(cnt_df[,seq(1, ncol(cnt_df) -1 )]))
set_totals <- data.frame(colSums(binary_mat)) %>%
rownames_to_column(.) %>%
setNames(., c('set_names', 'set_size'))
grid_data <- cnt_df[,seq(1, ncol(cnt_df) -1)] %>%
as.matrix(.) %>%
melt()
grid_data$value <- as.logical(grid_data$value)
ol <- list(grid_data, intersect_data, set_totals) %>%
setNames(., c('grid_data', 'intersect_data', 'set_totals'))
return(ol)
}
tmp_data <- calc_set_overlaps(binary_mat)
View(tmp_data)
View(tmp_data[["set_totals"]])
ggplot(data=tmp_data$set_totals, aes(x=set_names, y=set_size)) + geom_bar()
ggplot(data=tmp_data$set_totals, aes(x=set_names, y=set_size)) + geom_bar(stat = 'identity')
ggplot(data=tmp_data$set_totals, aes(x=set_names, y=set_size)) + geom_bar(stat = 'identity') + theme_void()
